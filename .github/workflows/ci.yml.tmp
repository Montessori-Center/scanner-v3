name: CI

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    
    - name: Install project
      run: poetry install --no-interaction
    
    - name: Run linting with Ruff
      run: |
        poetry run ruff check src/ tests/
        poetry run ruff format --check src/ tests/
    
    - name: Run type checking with mypy
      run: |
        poetry run mypy src/ --ignore-missing-imports
    
    - name: Run security check with bandit
      run: |
        poetry run bandit -r src/ -f json -o bandit-report.json || true
        poetry run bandit -r src/ --severity-level medium
    
    - name: Run safety check
      run: |
        poetry run safety check --json --output safety-report.json || true
        poetry run safety check
    
    - name: Run tests with pytest
      run: |
        poetry run pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing
    
    - name: Test CLI commands
      run: |
        poetry run python -m src.cli --help
        poetry run python -m src.cli list
        poetry run python -m src.cli version
    
    - name: Test CLI scan functionality
      run: |
        mkdir -p test_scan
        echo "print('hello')" > test_scan/test.py
        poetry run python -m src.cli scan test_scan --format json --output test_results.json
        test -f test_results.json && echo "âœ… CLI scan works"
    
    - name: Upload coverage reports to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          test_results.json
          bandit-report.json
          safety-report.json
          coverage.xml
        retention-days: 30

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
    
    - name: Build package
      run: |
        poetry build
        ls -la dist/
    
    - name: Check package metadata
      run: |
        poetry run pip install twine
        poetry run twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/
        retention-days: 30
