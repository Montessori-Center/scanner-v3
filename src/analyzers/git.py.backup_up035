#!/usr/bin/env python3
"""Git repository analyzer"""
import shutil
import subprocess
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional

from src.core.base import BaseAnalyzer
from src.core.logger import get_logger
from src.core.models import AnalysisResult, ScanResult


class GitAnalyzer(BaseAnalyzer):
    """Analyze git repository history and statistics"""

    name = "git"
    description = "Git repository history, commits, branches, contributors"

    logger = get_logger("git")

    async def analyze(self, scan: ScanResult) -> AnalysisResult:
        """Analyze git repository"""

        # Check if git is installed
        if not shutil.which("git"):
            return AnalysisResult(
                analyzer=self.name,
                data={
                    "has_git": False,
                    "error": "Git is not installed on the system"
                }
            )

        git_dir = scan.root / ".git"

        if not git_dir.exists():
            return AnalysisResult(
                analyzer=self.name,
                data={
                    "has_git": False,
                    "message": "Not a git repository"
                }
            )

        # Get git info
        current_branch = self._get_current_branch(scan.root)
        branches = self._get_branches(scan.root)
        tags = self._get_tags(scan.root)
        remotes = self._get_remotes(scan.root)
        recent_commits = self._get_recent_commits(scan.root, limit=20)
        contributors = self._get_contributors(scan.root)
        file_stats = self._get_file_stats(scan.root)

        return AnalysisResult(
            analyzer=self.name,
            data={
                "has_git": True,
                "current_branch": current_branch,
                "branches": branches,
                "tags": tags[:10],  # Top 10 tags
                "remotes": remotes,
                "recent_commits": recent_commits,
                "contributors": contributors[:10],  # Top 10 contributors
                "stats": {
                    "total_branches": len(branches),
                    "total_tags": len(tags),
                    "total_commits": self._count_commits(scan.root),
                    "total_contributors": len(contributors),
                    "files_changed": file_stats.get('files_changed', 0),
                    "insertions": file_stats.get('insertions', 0),
                    "deletions": file_stats.get('deletions', 0)
                },
                "last_commit": recent_commits[0] if recent_commits else None
            }
        )

    def _run_git_command(self, cwd: Path, args: list[str]) -> Optional[str]:
        """Run git command safely"""
        try:
            result = subprocess.run(
                ['git'] + args,
                cwd=cwd,
                capture_output=True,
                text=True,
                timeout=5
            )
            if result.returncode == 0:
                return result.stdout.strip()
        except Exception as e:
            self.logger.debug(f"Error running git command: {e}")
        return None

    def _get_current_branch(self, root: Path) -> str:
        """Get current branch name"""
        branch = self._run_git_command(root, ['rev-parse', '--abbrev-ref', 'HEAD'])
        return branch or 'unknown'

    def _get_branches(self, root: Path) -> list[str]:
        """Get all branches"""
        output = self._run_git_command(root, ['branch', '-a'])
        if output:
            branches = []
            for line in output.split('\n'):
                branch = line.strip().lstrip('* ')
                if branch and not branch.startswith('HEAD'):
                    branches.append(branch)
            return branches
        return []

    def _get_tags(self, root: Path) -> list[str]:
        """Get all tags"""
        output = self._run_git_command(root, ['tag'])
        if output:
            return [tag for tag in output.split('\n') if tag]
        return []

    def _get_remotes(self, root: Path) -> list[dict[str, str]]:
        """Get remote repositories"""
        output = self._run_git_command(root, ['remote', '-v'])
        if output:
            remotes = []
            seen = set()
            for line in output.split('\n'):
                if line:
                    parts = line.split()
                    if len(parts) >= 2 and parts[0] not in seen:
                        remotes.append({
                            'name': parts[0],
                            'url': parts[1]
                        })
                        seen.add(parts[0])
            return remotes
        return []

    def _get_recent_commits(self, root: Path, limit: int = 20) -> list[dict[str, str]]:
        """Get recent commits"""
        format_str = '%H|%an|%ae|%at|%s'
        output = self._run_git_command(
            root,
            ['log', f'--format={format_str}', f'-{limit}']
        )

        if output:
            commits = []
            for line in output.split('\n'):
                if line:
                    parts = line.split('|')
                    if len(parts) >= 5:
                        commits.append({
                            'hash': parts[0][:8],
                            'author': parts[1],
                            'email': parts[2],
                            'timestamp': datetime.fromtimestamp(int(parts[3])).isoformat(),
                            'message': parts[4][:100]  # First 100 chars
                        })
            return commits
        return []

    def _get_contributors(self, root: Path) -> list[dict[str, int]]:
        """Get contributors with commit counts"""
        output = self._run_git_command(
            root,
            ['shortlog', '-sn', '--no-merges']
        )

        if output:
            contributors = []
            for line in output.split('\n'):
                if line:
                    parts = line.strip().split('\t')
                    if len(parts) >= 2:
                        contributors.append({
                            'name': parts[1],
                            'commits': int(parts[0])
                        })
            return sorted(contributors, key=lambda x: x['commits'], reverse=True)
        return []

    def _count_commits(self, root: Path) -> int:
        """Count total commits"""
        output = self._run_git_command(root, ['rev-list', '--count', 'HEAD'])
        if output and output.isdigit():
            return int(output)
        return 0

    def _get_file_stats(self, root: Path) -> dict[str, int]:
        """Get file change statistics"""
        # Get stats for last 100 commits
        output = self._run_git_command(
            root,
            ['log', '--stat', '--oneline', '-100']
        )

        stats = {
            'files_changed': 0,
            'insertions': 0,
            'deletions': 0
        }

        if output:
            # Parse stats from git log
            for line in output.split('\n'):
                if 'insertions(+)' in line or 'deletions(-)' in line:
                    parts = line.split(',')
                    for part in parts:
                        if 'insertion' in part:
                            num = ''.join(filter(str.isdigit, part))
                            if num:
                                stats['insertions'] += int(num)
                        elif 'deletion' in part:
                            num = ''.join(filter(str.isdigit, part))
                            if num:
                                stats['deletions'] += int(num)
                        elif 'file' in part:
                            num = ''.join(filter(str.isdigit, part))
                            if num:
                                stats['files_changed'] += int(num)

        return stats
