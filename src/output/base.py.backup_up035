#!/usr/bin/env python3
"""Base formatter class"""
from abc import ABC, abstractmethod
from typing import Any, Dict


class BaseFormatter(ABC):
    """Base class for all output formatters"""

    def __init__(self, config: dict[str, Any] = None):
        """Initialize formatter with optional config"""
        self.config = config or {}

    @abstractmethod
    def format(self, results: dict[str, Any]) -> str:
        """Format analysis results

        Args:
            results: Dictionary with analysis results from all analyzers

        Returns:
            Formatted string representation
        """
        pass

    def get_name(self) -> str:
        """Get formatter name"""
        return self.__class__.__name__
